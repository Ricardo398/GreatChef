@page "/"
@using GreatChef.Models
@using GreatChef.Repositories
@inject IRestaurantRepository RestaurantRepository
@inject IMenuItemRepository MenuItemRepository
@inject IOrderRepository OrderRepository

<div class="home-page">
    <section class="hero-section">
        <div class="container">
            <h1 class="display-3 fw-bold mb-3">Bem-vindo ao GreatChef</h1>
            <p class="lead mb-4">Gerencie seu restaurante de forma moderna, rápida e visual!</p>
            <a href="#menu" class="btn btn-primary">Ver Cardápio</a>
            <a href="#pedidos" class="btn btn-outline-primary">Pedidos</a>
        </div>
    </section>

    <section class="stats-section cont">
        <h2>Estatísticas Rápidas</h2>
        <div class="row g-4 justify-content-center">
            <div class="col-md-3 col-sm-6">
                <div class="card">
                    <div class="card-body">
                        <i class="bi bi-clock-history"></i>
                        <h3>Pedidos Pendentes</h3>
                        <p class="card-text">@PendingOrders?.Count()</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6">
                <div class="card">
                    <div class="card-body">
                        <i class="bi bi-list-ul"></i>
                        <h3>Itens no Menu</h3>
                        <p class="card-text">@MenuItems?.Count()</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6">
                <div class="card">
                    <div class="card-body">
                        <i class="bi bi-calendar-event"></i>
                        <h3>Pedidos Hoje</h3>
                        <p class="card-text">@TodayOrders?.Count()</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6">
                <div class="card">
                    <div class="card-body">
                        <i class="bi bi-cash-coin"></i>
                        <h3>Receita Hoje</h3>
                        <p class="card-text">R$ @TodayRevenue.ToString("N2")</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section id="pedidos" class="orders-section cont">
        <div class="d-flex justify-content-end mb-3">
            <button class="btn btn-primary" @onclick="OpenNewOrderModal">
                <i class="bi bi-plus-circle me-1"></i> Novo Pedido
            </button>
        </div>
        <h2>Pedidos Pendentes</h2>
        @if (PendingOrders?.Any() == true)
        {
            <div class="row g-4 justify-content-center">
                @foreach (var order in PendingOrders)
                {
                    <div class="col-md-4 col-sm-6">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title"><i class="bi bi-person-circle me-2"></i>@order.CustomerName</h5>
                                <p class="card-text text-muted">Pedido #@order.Id</p>
                                <p class="card-text">Total: <strong>R$ @order.TotalAmount.ToString("N2")</strong></p>
                                <button class="btn btn-success mt-auto" @onclick="() => CompleteOrder(order.Id)">
                                    <i class="bi bi-check-lg me-1"></i> Concluir
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-muted text-center">Nenhum pedido pendente.</p>
        }
    </section>

    <section id="menu" class="menu-section cont">
        <h2>Cardápio</h2>
        @if (MenuItems?.Any() == true)
        {
            <div class="row g-4 justify-content-center">
                @foreach (var item in MenuItems)
                {
                    <div class="col-md-4 col-lg-3 col-sm-6">
                        <div class="card h-100">
                            <img src="@item.ImageUrl" class="card-img-top" alt="@item.Name" />
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@item.Name</h5>
                                <p class="card-text">@item.Description</p>
                                <p class="card-text"><strong>Preço: </strong>@item.Price.ToString("C")</p>
                                <div class="d-flex justify-content-between align-items-center mt-auto mb-3">
                                    <span class="badge bg-@(item.IsAvailable ? "success" : "secondary")">@(item.IsAvailable ? "Disponível" : "Indisponível")</span>
                                    <button class="btn btn-outline-primary btn-sm" @onclick="() => EditMenuItem(item)">
                                        <i class="bi bi-pencil"></i> Editar
                                    </button>
                                </div>
                                <button class="btn btn-primary" @onclick="async () => await AddToCart(item)">Adicionar ao Carrinho</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-muted text-center">Nenhum item no menu.</p>
        }
    </section>
</div>

@code {
    private IEnumerable<Order>? PendingOrders { get; set; }
    private IEnumerable<MenuItem>? MenuItems { get; set; }
    private IEnumerable<Order>? TodayOrders { get; set; }
    private decimal TodayRevenue { get; set; }

    // Variáveis para o modal de novo pedido
    private bool showNewOrderModal = false;
    private List<MenuItem> selectedOrderItems = new();
    private string newOrderCustomerName = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var restaurant = await RestaurantRepository.GetFirstAsync();
        if (restaurant != null)
        {
            PendingOrders = await OrderRepository.GetOrdersByStatusAsync(OrderStatus.Pending);
            MenuItems = await MenuItemRepository.GetMenuItemsByRestaurantAsync(restaurant.Id);
            TodayOrders = await OrderRepository.GetOrdersByDateAsync(DateTime.Today);
            TodayRevenue = TodayOrders?.Sum(o => o.TotalAmount) ?? 0;
        }
        else
        {
            PendingOrders = Enumerable.Empty<Order>();
            MenuItems = Enumerable.Empty<MenuItem>();
            TodayOrders = Enumerable.Empty<Order>();
            TodayRevenue = 0;
        }
    }

    private async Task CompleteOrder(int orderId)
    {
        var order = await OrderRepository.GetByIdAsync(orderId);
        if (order != null)
        {
            order.Status = OrderStatus.Completed;
            await OrderRepository.UpdateAsync(order);
            await LoadData(); // Recarrega os dados para atualizar a lista de pedidos pendentes
        }
    }

    private void EditMenuItem(MenuItem item)
    {
        // TODO: Implementar edição do item
    }

    private async Task AddToCart(MenuItem item)
    {
        // TODO: Implementar lógica do carrinho
        await Task.CompletedTask;
    }

    // Funções para o modal de novo pedido
    private void OpenNewOrderModal()
    {
        selectedOrderItems = new List<MenuItem>(); // Limpa seleções anteriores
        newOrderCustomerName = "";
        showNewOrderModal = true;
    }

    private void CloseNewOrderModal()
    {
        showNewOrderModal = false;
    }

    private void ToggleMenuItemSelection(MenuItem item)
    {
        if (selectedOrderItems.Contains(item))
        {
            selectedOrderItems.Remove(item);
        }
        else
        {
            selectedOrderItems.Add(item);
        }
    }

    private async Task CreateNewOrder()
    {
        if (selectedOrderItems.Any() && !string.IsNullOrWhiteSpace(newOrderCustomerName))
        {
            var restaurant = await RestaurantRepository.GetFirstAsync();
            if (restaurant != null)
            {
                var newOrder = new Order
                {
                    RestaurantId = restaurant.Id,
                    CustomerName = newOrderCustomerName,
                    Status = OrderStatus.Pending,
                    CreatedAt = DateTime.UtcNow,
                    OrderItems = selectedOrderItems.Select(item => new OrderItem
                    {
                        MenuItemId = item.Id,
                        Quantity = 1, // Simplificado: sempre quantidade 1 para teste
                        UnitPrice = item.Price,
                        Subtotal = item.Price
                    }).ToList(),
                    TotalAmount = selectedOrderItems.Sum(item => item.Price)
                };

                await OrderRepository.AddAsync(newOrder);
                await LoadData(); // Recarrega os pedidos para mostrar o novo
                CloseNewOrderModal(); // Fecha o modal
            }
            // TODO: Adicionar feedback ao usuário se o restaurante não for encontrado
        }
        // TODO: Adicionar feedback ao usuário se nenhum item for selecionado ou nome estiver vazio
    }

}

@if (showNewOrderModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Criar Novo Pedido</h5>
                    <button type="button" class="btn-close" @onclick="CloseNewOrderModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="customerName" class="form-label">Nome do Cliente</label>
                        <input type="text" class="form-control" id="customerName" @bind="newOrderCustomerName" />
                    </div>
                    <h6>Selecionar Itens do Cardápio:</h6>
                    @if (MenuItems?.Any() == true)
                    {
                        <div class="row g-2">
                            @foreach (var item in MenuItems)
                            {
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @onchange="() => ToggleMenuItemSelection(item)" id="item-@item.Id" checked="@selectedOrderItems.Contains(item)">
                                        <label class="form-check-label" for="item-@item.Id">
                                            @item.Name - R$@item.Price.ToString("N2")
                                        </label>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                         <p class="text-muted">Nenhum item de menu disponível para adicionar a um pedido.</p>
                    }

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseNewOrderModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateNewOrder">Criar Pedido</button>
                </div>
            </div>
        </div>
    </div>

    // Overlay para o modal
    <div class="modal-backdrop fade show"></div>
}
